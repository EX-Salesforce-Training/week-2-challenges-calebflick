@isTest
public class P0BTest
{
    @isTest
    public static void nFibonacciTest()
    {
        Integer result;
        
        result = P0B.nFibonacci(0);
        system.assertEquals(0, result);
        
        result = P0B.nFibonacci(1);
        system.assertEquals(1, result);
        
        result = P0B.nFibonacci(2);
        system.assertEquals(1, result);
        
        result = P0B.nFibonacci(10);
        system.assertEquals(55, result);
    }
    
    @isTest
    public static void sortArrayTest()
    {
        Integer[] result;
        
        List<Integer> input1 = new List<Integer>{2, 4, 5, 1, 3, 1};
        Integer[] expectedOutput1 = new Integer[]{1, 1, 2, 3, 4, 5};
        result = P0B.sortArray(input1);
        system.assertEquals(expectedOutput1, result);
        
        List<Integer> input2 = new List<Integer>{5, 4, 3, 2, 1};
        Integer[] expectedOutput2 = new Integer[]{1, 2, 3, 4, 5};
        result = P0B.sortArray(input2);
        system.assertEquals(expectedOutput2, result);
    }
    
    @isTest
    public static void nFactorialTest()
    {
        Integer result;
        
        result = P0B.nFactorial(0);
        system.assertEquals(1, result);
        
        result = P0B.nFactorial(1);
        system.assertEquals(1, result);
        
        result = P0B.nFactorial(3);
        system.assertEquals(6, result);
    }
    
    @isTest
    public static void rotateLeftNTimesTest()
    {
        Integer[] result;
        
        Integer[] arrayInput1 = new Integer[]{1, 2, 3, 4, 5};
        Integer[] arrayOutput1 = new Integer[]{2, 3, 4, 5, 1};
        result = P0B.rotateLeftNTimes(arrayInput1, 1);
        system.assertEquals(arrayOutput1, result);
        
        Integer[] arrayInput2 = new Integer[]{1, 2, 3, 4, 5};
        Integer[] arrayOutput2 = new Integer[]{2, 3, 4, 5, 1};
        result = P0B.rotateLeftNTimes(arrayInput2, 6);
        system.assertEquals(arrayOutput2, result);
        
        Integer[] arrayInput3 = new Integer[]{1, 2, 3, 4, 5};
        Integer[] arrayOutput3 = new Integer[]{4, 5, 1, 2, 3};
        result = P0B.rotateLeftNTimes(arrayInput3, 3);
        system.assertEquals(arrayOutput3, result);
    }
    
    @isTest
    public static void bracketsAreBalancedTest()
    {
        Boolean result;
        
        result = P0B.bracketsAreBalanced('()');
        system.assertEquals(true, result);
        
        result = P0B.bracketsAreBalanced('()()');
        system.assertEquals(true, result);
        
        result = P0B.bracketsAreBalanced('(())');
        system.assertEquals(true, result);
        
        result = P0B.bracketsAreBalanced('({[]})');
        system.assertEquals(true, result);
        
        result = P0B.bracketsAreBalanced('(');
        system.assertEquals(false, result);
        
        result = P0B.bracketsAreBalanced(')');
        system.assertEquals(false, result);
        
        result = P0B.bracketsAreBalanced('(()');
        system.assertEquals(false, result);
        
        result = P0B.bracketsAreBalanced('([)]');
        system.assertEquals(false, result);
    }
}